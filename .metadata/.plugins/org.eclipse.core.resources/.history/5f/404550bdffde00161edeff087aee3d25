package br.com.cpfl.mapping;

import static javax.naming.Context.URL_PKG_PREFIXES;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.sap.aii.mapping.api.StreamTransformation;
import com.sap.aii.mapping.api.StreamTransformationException;
import com.sun.xml.internal.txw2.annotation.XmlElement;

import br.com.cpfl.daoejb.MappingPODataAccessRemote;
import br.com.cpfl.daoejb.entidades.CpflZmodelObisc;
import br.com.cpfl.mapping.jaxb.MessageHeader;
import br.com.cpfl.mapping.jaxb.MeterAsset;
import br.com.cpfl.mapping.jaxb.MeterDataRequest;
import br.com.cpfl.mapping.jaxb.MeterReadsRequestMessage;

/**
 * Implementação em Java do programa Abap Z_MDM_XI_ZFA_ODR
 * 
 * @author Dorival Querino da Silva
 * 
 *         - 7 de dez de 2016 - CSC
 * 
 */
public class ZMdmXiZfaOdr implements StreamTransformation {

	private Map map;
	private Document document;
	private String nodeName3;
	private String wNodeName;
	private String wNodeValue;
	private String wFieldName;
	private String wtableName;
	private Integer w_index;
	private String w_fieldname;
	private String w_tablename;
	private String w_node_name;
	private Node w_node;
	private String w_node_value;
	private String wDateTime;

	MessageHeader wHeader;

	MeterDataRequest wPayload;

	private String wStarttime;
	private String wStarttime10;
	private String wEndTime;
	private String w_date;

	MeterAsset wMeter, tMeter;

	private Object ejbObj;
	private String wModel;

	@Override
	public void setParameter(Map map) {
		this.map = map;
		if (map == null) {
			this.map = new HashMap();
		}
	}

	@Override
	public void execute(InputStream inputStream, OutputStream outputStream) throws StreamTransformationException {
		try {

			// applica unmarshal no payload de entrada
			JAXBContext jbContex = JAXBContext.newInstance(MeterReadsRequestMessage.class);
			Unmarshaller unmarshaller = jbContex.createUnmarshaller();
			MeterReadsRequestMessage message = (MeterReadsRequestMessage) unmarshaller.unmarshal(inputStream);

			// popula objetos jaxb
			wHeader = message.getHeader();
			wPayload = message.getPayload();
			tMeter = message.getPayload().getMeter();
			wMeter = message.getPayload().getMeter();
			wHeader = message.getHeader();

			// DocumentBuilderFactory factory =
			// DocumentBuilderFactory.newInstance();
			// DocumentBuilder builder = factory.newDocumentBuilder();
			// Document document = builder.parse(inputStream);
			//
			// NodeList emp_node_iterator =
			// document.getElementsByTagName("MeterReadsRequestMessage");
			// /* 1 */for (int i = 0; i < emp_node_iterator.getLength(); i++)
			// {// primeiro
			// // nivel
			// Node emp_node = emp_node_iterator.item(i);
			// NodeList emp_node_list = emp_node.getChildNodes();
			// /* 2 */for (int j = 0; j < emp_node_list.getLength(); j++) {//
			// Percorre
			// // tags
			// // do
			// // primeiro
			// // nivel
			// Node emp_subnode = emp_node_list.item(i);
			// String emp_subnode_name = emp_subnode.getNodeName();
			// NodeList emp_subnode_list = emp_node.getChildNodes();
			// /* 3 */for (int k = 0; k < emp_subnode_list.getLength(); k++) {//
			// Percorre
			// // tags
			// // do
			// // segundo
			// // nivel
			// Node emp_subnode2 = emp_subnode_list.item(k);
			// NodeList emp_subnode_list2 = emp_subnode2.getChildNodes();
			// String emp_subnode_name2 = emp_subnode2.getNodeName();
			// w_index = k;// sy-index - 1.
			// w_node = emp_subnode_list2.item(k);
			// if (emp_subnode_name2.equals("Meter")) {
			// /* 4 */for (int l = 0; l < emp_subnode_list2.getLength(); l++)
			// {// Percorre
			// // tags
			// // do
			// // Terceiro
			// // Nivel
			// Node emp_subnode3 = emp_subnode_list2.item(l);
			// String emp_subnode_name3 = emp_subnode3.getNodeName();
			// NodeList emp_subnode_list3 = emp_subnode3.getChildNodes();
			// w_index = l;// sy-index - 1.
			// w_node_name = emp_subnode3.getNodeName();
			// w_node_value = emp_subnode3.getNodeValue();
			// w_fieldname = "fs_" + emp_subnode_name2 + "-" + w_node_name;
			//// ASSIGN (w_fieldname) TO <fs>.
			//// IF sy-subrc EQ 0.
			//// MOVE w_node_value TO <fs>.
			//// END IF.
			// } // end loop 4
			// w_fieldname = "fs_" + emp_subnode_name2;
			// // ASSIGN (w_fieldname) TO <fs>.
			// w_tablename = "t_" + emp_subnode_name2;
			// // ASSIGN (w_tablename) TO <fs_table>.
			// // IF sy-subrc EQ 0.
			// // APPEND <fs> TO <fs_table>.
			// // END IF.
			// } else {
			// // TODO: REVISAR
			// w_index = k;// sy-index - 1;
			// w_node = emp_subnode_list.item(w_index);
			// w_node_name = w_node.getNodeName();
			// w_node_value = w_node.getNodeValue();
			// w_fieldname = "fs_" + emp_subnode_name + "-" + w_node_name;
			// // ASSIGN (w_fieldname) TO <fs>.
			// // IF sy-subrc EQ 0.
			// // MOVE w_node_value TO <fs>.
			// // ENDIF.
			// }
			// } // End loop/*3 */
			// w_fieldname = "fs_" + emp_subnode_name;
			// // ASSIGN (w_fieldname) TO <fs>.
			// w_tablename = "t_" + emp_subnode_name;
			// // ASSIGN (w_tablename) TO <fs_table>.
			// // IF sy-subrc EQ 0.
			// // APPEND <fs> TO <fs_table>.
			// // ENDIF.
			//
			// } // End loop/*2 */
			// } // End loop /*1*/

			//////////////////////////////////////////// //TODO: ver onde
			//////////////////////////////////////////// vai--xml de saida
			// É um novo xml que vai montar a resposta
			//////////////////////////////////////////// usar
			DocumentBuilderFactory factory2 = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder2 = factory2.newDocumentBuilder();
			Document oDocument = builder2.newDocument();
			// odocument = ixml_factory->create_document( ).

			//////////////////////////////////////////////

			w_date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
			// IF NOT t_header[] IS INITIAL.//se esta vazio
			// READ TABLE t_header INDEX 1 INTO w_header.
			// ENDIF.
			// IF NOT t_meter[] IS INITIAL.
			// READ TABLE t_meter INDEX 1 INTO w_meter.
			// ENDIF.
			// IF NOT t_payload[] IS INITIAL.
			// READ TABLE t_payload INDEX 1 INTO w_payload.
			// ENDIF.

			// FIXME: Validar o subsTring
			wDateTime = wHeader.getDateTime() != null ? wHeader.getDateTime().toString().substring(0,10) : null;

			wStarttime = wPayload.getStartTime() != null ? wPayload.getStartTime().toString().substring(0,16) : null;
			wEndTime = wPayload.getEndTime() != null ? wPayload.getEndTime().toString().substring(0,16) : null;
			
			Calendar cal = Calendar.getInstance();
			cal.setTime(new SimpleDateFormat("yyyy-MM-dd'T'hh:mm")
					.parse(wStarttime));
			Calendar horaAberta = Calendar.getInstance();
			horaAberta.setTime(new SimpleDateFormat("yyyyMMddhhmmss").parse("99991231235959"));

			if (cal.compareTo(horaAberta) != 0) {
				cal.add(Calendar.HOUR_OF_DAY, -3);
			}
			wStarttime = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm").format(cal.getTime());

			cal.setTime(new SimpleDateFormat("yyyy-MM-dd'T'hh:mm").parse(wEndTime));

			// IF lv_saptstamp NE '99991231235959'.
			if (cal.compareTo(horaAberta) != 0) {
				cal.add(Calendar.HOUR_OF_DAY, -3);
			}
			wEndTime = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm").format(cal.getTime());

			Element paramE = oDocument.createElement("param");
			oDocument.appendChild(paramE);
			Element version = oDocument.createElement("version");
			version.setAttribute("date", w_date);
			version.setTextContent("1.1");
			paramE.appendChild(version);

			Element requestId = oDocument.createElement("request-id");
			requestId.setTextContent(wHeader.getMessageID());
			paramE.appendChild(requestId);
			Element ident = oDocument.createElement("identification");
			paramE.appendChild(ident);
			Element meterPoint = oDocument.createElement("metering-point");
			meterPoint.setAttribute("id", wMeter.getMRID());
			ident.appendChild(meterPoint);

			Element actionList = oDocument.createElement("action-list");
			paramE.appendChild(actionList);

			wModel = wMeter.getModelNumber();

			List<CpflZmodelObisc> modelos = consultarModelo(wModel);
			if (modelos != null && modelos.size() > 0) {
				ordenarModelos(modelos);
			}
			String wObisCode2 = null;
			for (CpflZmodelObisc zModelObisc : modelos) {
				String wObisCode = zModelObisc.getId().getObiscode();
				Element actionE = oDocument.createElement("action");
				if (zModelObisc.getFlagRegister() != null) {
					actionE.setAttribute("task-name", "read-register-values");
				} else {
					actionE.setAttribute("task-name", "read-load-profile");
				}
				
				if ("ION8600-3E".equals(zModelObisc.getId().getModel())
						|| "2180-3E-COMP".equals(zModelObisc.getId().getModel())) {

					if ("1-9".equals(wObisCode))
						wObisCode2 = "1-9:0.0.0";
					else if ("1-10".equals(wObisCode))
						wObisCode2 = "1-10:0.0.0";
					else if ("1-30".equals(wObisCode))
						wObisCode2 = "1-30:0.0.0";
					else if ("1-31".equals(wObisCode))
						wObisCode2 = "1-31:0.0.0";
					else
						wObisCode2 = wObisCode;
					
					actionE.setAttribute("obis-id-code", wObisCode2);
					
				}else{
					actionE.setAttribute("obis-id-code", wObisCode);
				}
				
				actionE.setAttribute("valuate", "full");
				Element timeFrame = oDocument.createElement("time-frame");
				
				 if( "2180-3E-COMP".equals(zModelObisc.getId().getModel())  ||
						 "ION8600-3E".equals(zModelObisc.getId().getModel())){
					 
					 timeFrame.setAttribute("date-from", wStarttime.substring(0, 10));
					 timeFrame.setAttribute("date-to", wEndTime.substring(0, 10));
				 }else{
					 timeFrame.setAttribute("date-from", wStarttime);
					 timeFrame.setAttribute("date-to", wEndTime);
				 }
				 
				 actionE.appendChild(timeFrame);
				 actionList.appendChild(actionE);
			}//end loop
			
			TransformerFactory tfInterna = TransformerFactory.newInstance();
			Transformer transformerInterno = tfInterna.newTransformer();
			DOMSource sourceInterno = new DOMSource(oDocument);
			StringWriter stringWriter = new StringWriter();
			transformerInterno.transform(sourceInterno, new StreamResult(stringWriter));
			StringBuffer buffer = stringWriter.getBuffer();
			System.out.println(buffer.toString());//FIXME: limpar
			
			String inicioHeader = "<?xml ";
			int i = buffer.indexOf(inicioHeader);
			String fimHeader = "?>";
			int j = buffer.lastIndexOf(fimHeader)+fimHeader.length();
			buffer.replace(i, j, "");
			
			
			String wrapperTag = "<ExecuteJob xmlns=\"http://odrlayer.tauron.cpfl.com.br/\"> <request><![CDATA['"
					+ buffer.toString()
					+ "]]></request></ExecuteJob>";
			
			System.out.println(wrapperTag);
			outputStream.write(wrapperTag.getBytes());

//			NodeList emp_node_iterator = document.getElementsByTagName("MeterReadsRequestMessage");
			// TODO:
		} catch (Exception e) {
			e.printStackTrace();
			throw new StreamTransformationException("Falha ao processar o mapping ", e);
		}
	}

	private void ordenarModelos(List<CpflZmodelObisc> modelos) {
		Collections.sort(modelos, new Comparator<CpflZmodelObisc>() {
			@Override
			public int compare(CpflZmodelObisc o1, CpflZmodelObisc o2) {
		        if (o1 == null && o2 == null) {
		            return 0;
		        }
		        if (o1 == null) {
		            return 1;
		        }
		        if (o2 == null) {
		            return -1;
		        }
		        
		        if (o1.getOrdem() == null && o2.getOrdem() == null) {
		            return 0;
		        }
		        if (o1.getOrdem() == null) {
		            return 1;
		        }
		        if (o2.getOrdem() == null) {
		            return -1;
		        }
				return o1.getOrdem().compareTo(o2.getOrdem());
			}
		});
	}

	/**
	 * Metodo para buscar modelo com tratativa para o problema de class cast
	 * causado por diferença de classLoader
	 * 
	 * @param paramModelo
	 * @return T(s) encontrado(s) no BD
	 */
	public <T> T executarMetodoRemoto(String metodo) throws Exception {
		Properties props = getProperties();

		// FIXME: Fazer cache, ver de instancia ou de classe, nao sera chamada
		// de outra classe
		Class<?> remoteInterface = getService(props);

		Method method = remoteInterface.getMethod(metodo);

		T tipoRetorno = (T) method.invoke(ejbObj);

		// CpflZCcsXiT001 ccsXi = (CpflZCcsXiT001) result;
		return tipoRetorno;
	}

	private Properties getProperties() {
		Properties props = new Properties();

		props.put(Context.INITIAL_CONTEXT_FACTORY,

				PIMessages.getString("ejbclient.context"));
		props.put(Context.PROVIDER_URL, PIMessages.getString("ejbclient.host_port"));

		props.put(URL_PKG_PREFIXES, PIMessages.getString("ejbclient.pkg_prefix"));
		return props;
	}

	private Class<?> getService(Properties props) throws Exception {
		InitialContext ctx = new InitialContext(props);
		ejbObj = ctx.lookup(PIMessages.getString("ejbclient.remote_url"));
		Class<?> remoteInterface;
		ClassLoader classLoader = ejbObj.getClass().getClassLoader();
		remoteInterface = classLoader.loadClass(MappingPODataAccessRemote.class.getCanonicalName());
		return remoteInterface;
	}

	/**
	 * Metodo para buscar modelo com tratativa para o problema de class cast
	 * causado por diferença de classLoader
	 * 
	 * @param paramModelo
	 * @return Lista com os modelos encontrados no BD
	 */
	public List consultarModelo(String paramModelo) throws Exception {

		Properties props = new Properties();

		props.put(Context.INITIAL_CONTEXT_FACTORY,

				PIMessages.getString("ejbclient.context"));
		props.put(Context.PROVIDER_URL, PIMessages.getString("ejbclient.host_port"));

		props.put(URL_PKG_PREFIXES, PIMessages.getString("ejbclient.pkg_prefix"));

		InitialContext ctx = new InitialContext(props);

		Object ejbObj = ctx.lookup(PIMessages.getString("ejbclient.remote_url"));

		ClassLoader classLoader = ejbObj.getClass().getClassLoader();
		Class<?> remoteInterface = classLoader.loadClass(MappingPODataAccessRemote.class.getCanonicalName());

		Class args[] = { paramModelo.getClass() };
		Method method = remoteInterface.getMethod("consultarModelo", args);
		Object params[] = { paramModelo };
		Object result = method.invoke(ejbObj, params);

		return (List) result;
	}

	public static void main(String[] args) throws Exception {

		System.out.println("Inicio: " + new SimpleDateFormat("HH:mm:ss.SSS").format(new Date()));
		long timeInMillis = Calendar.getInstance().getTimeInMillis();

		// ProvisionamentoRTeste zProv = new ProvisionamentoRTeste();
		ZMdmXiZfaOdr zProv = new ZMdmXiZfaOdr();

		InputStream inputStream = new FileInputStream(new File("src/br/com/cpfl/mapping/ODR_entrada.xml"));
		OutputStream outputStream = new FileOutputStream(new File("src/br/com/cpfl/mapping/ODR_entrada-out.xml"));

		zProv.execute(inputStream, outputStream);

		System.out.println("Fim: " + new SimpleDateFormat("HH:mm:ss.SSS").format(new Date()));
		long timeInMillis2 = Calendar.getInstance().getTimeInMillis();
		System.out.println("Tempo gasto = " + (Double.valueOf(timeInMillis2 - timeInMillis) / 1000) + " segundo(s)");

		Runtime.getRuntime().exec("explorer D:\\desenv\\CPFL\\Workspace\\z-mdm-zfa-odr-bk\\src\\br\\com\\cpfl\\mapping\\ODR_entrada-out.xml");
	}
}
