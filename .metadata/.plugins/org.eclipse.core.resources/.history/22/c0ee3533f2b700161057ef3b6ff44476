package br.com.cpfl.mapping;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.sap.aii.mapping.api.StreamTransformation;
import com.sap.aii.mapping.api.StreamTransformationException;

/**
 * Implemtação em Java do programa Abap Z_TRATA_FALHA_DEPARA_ITENS
 * 
 * @author Dorival Querino da Silva - 
 * 
 * 30 de Nov de 2016 - CSC
 * 
 */
public class ZTrataFalhaDeParaItens implements StreamTransformation {
	private Map param;
	private Document document;

	@Override
	public void setParameter(Map param) {
		this.param = param;
		if (param == null)
			this.param = new HashMap();
	}

	@Override
	public void execute(InputStream inputStream, OutputStream outputStream) throws StreamTransformationException {
		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();

			this.document = builder.parse(inputStream);

			NodeList nList = document.getElementsByTagName("tns:endTime");
			// Só processar se tiver o valor com '*', senao retorna
			if (!nodeContains(nList, "*")) {
				return;
			}

			for (int i = 0; i < nList.getLength(); i++) {
				// Extrai o valor do node tns:endTime
				String wDateTime = nList.item(i).getTextContent();
				String time = null;
				String[] split = wDateTime.split("T");
				if (split.length > 0) {
					time = split[1];

					if (time.replaceAll(":", "").equals("240000")) {
						
						// Ajusta o valor data/hora do node
						Calendar cal = Calendar.getInstance();
						cal.set(Integer.valueOf(wDateTime.substring(0, 4)),
								Integer.valueOf(wDateTime.substring(5, 7)) - 1,
								Integer.valueOf(wDateTime.substring(8, 10)),
								// Horas
								Integer.valueOf(wDateTime.substring(11, 13)),
								Integer.valueOf(wDateTime.substring(14, 16)),
								Integer.valueOf(wDateTime.substring(17, 19)));
						
						//subtrai 300 milisegundos na data encontrada
						cal.add(Calendar.MILLISECOND, -300);

						String formatado = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(cal.getTime());
						
						// Atribui o valor do node tns:endTime com data/hora ajsutada
						nList.item(i).setTextContent(formatado);
					}
				}
			}

			//Gera o xml de saída
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			StreamResult result = new StreamResult(outputStream);
			transformer.transform(domSource, result);
		} catch (Exception e) {
			e.printStackTrace();
			throw new StreamTransformationException("Falha ao processar o mapping ", e);
		}
	}

	private boolean nodeContains(NodeList nList, String value) {
		for (int i = 0; i < nList.getLength(); i++) {
			Node node = nList.item(i);
			if (node.getNodeType() == Node.ELEMENT_NODE && node.hasChildNodes()) {
				String text = node.getFirstChild().getTextContent();
				if (text != null && text.contains(value)) {
					return true;
				}
			}
		}

		return false;
	}

	public static void main(String[] args) throws Exception {

		System.out.println("Inicio: " + new SimpleDateFormat("HH:mm:ss.SSS").format(new Date()));
		long timeInMillis = Calendar.getInstance().getTimeInMillis();
		ZTrataFalhaDeParaItens reg = new ZTrataFalhaDeParaItens();

		InputStream inputStream = new FileInputStream(
				new File("D:\\desenv\\CPFL\\Workspace\\trata-falha\\tf-itens.xml"));
		OutputStream outputStream = new FileOutputStream(
				new File("D:\\desenv\\CPFL\\Workspace\\trata-falha\\tf-itens-OUT.xml"));

		reg.execute(inputStream, outputStream);

		System.out.println("Fim: " + new SimpleDateFormat("HH:mm:ss.SSS").format(new Date()));
		long timeInMillis2 = Calendar.getInstance().getTimeInMillis();
		System.out.println("Tempo gasto = " + (Double.valueOf(timeInMillis2 - timeInMillis) / 1000) + " segundo(s)");
	}
}
